<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed = 0;
yspeed = 0;
dir = 0;
arm_index = 0;
arm_maxindex = sprite_get_number(spr_player_arms)-1;
arm_dir = 0;
leg_dir = 0;
inventory_list = ds_list_create();
/*Items:
     0 = Grenade
     1 = Pistol
     2 = Rifle
*/
currentitemslot = 0;
can_shoot = true;
ds_list_add(inventory_list,1);
ds_list_add(inventory_list,0);
ds_list_add(inventory_list,2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed += (keyboard_check(vk_right)-keyboard_check(vk_left))*global.timescale;
yspeed += (keyboard_check(vk_down)-keyboard_check(vk_up))*global.timescale;
var has_collision = false;
while(place_meeting(x+xspeed,y,obj_block))
{
    xspeed -= sign(xspeed);
    has_collision = true;
}
while(place_meeting(x,y+yspeed,obj_block))
{
    yspeed -= sign(yspeed);
    has_collision = true;
}
if(!has_collision)
{
    while(place_meeting(x+xspeed,y+yspeed,obj_block))
    {
        xspeed -= sign(xspeed);
        yspeed -= sign(yspeed);
    }
}
x += xspeed;
y += yspeed;
xspeed /= (0.5/global.timescale)+1;
yspeed /= (0.5/global.timescale)+1;
if(xspeed &gt; 8) xspeed = 8;
if(yspeed &gt; 8) yspeed = 8;
if(xspeed &lt; -8) xspeed = -8;
if(yspeed &lt; -8) yspeed = -8;
if(mouse_check_button(mb_left))
{
    switch(ds_list_find_index(inventory_list,currentitemslot))
    {
        case 0:
            if(can_shoot &amp;&amp; mouse_check_button_pressed(mb_left))
            {
                var inst = instance_create(x,y,obj_grenade);
                with(inst)
                {
                    var _dir = point_direction(obj_player.x,obj_player.y,mouse_x,mouse_y);
                    dir = _dir;
                    spd = 12*global.timescale
                    image_angle = _dir;
                }
                can_shoot = false;
                alarm[0] = 30/global.timescale;
            }
            break;
        case 1:
            if(can_shoot &amp;&amp; mouse_check_button_pressed(mb_left))
            {
                var inst = instance_create(x+lengthdir_x(24,arm_dir-10),y+lengthdir_y(24,arm_dir-10),obj_bullet);
                with(inst)
                {
                    direction = other.arm_dir;
                    image_angle = other.arm_dir;
                    speed = 24*global.timescale;
                    damage = 8;
                }
                audio_play_sound(snd_pistol,5,false);
                can_shoot = false;
                alarm[0] = 5/global.timescale;
            }
            break;
        case 2:
            if(can_shoot)
            {
                var inst = instance_create(x+lengthdir_x(24,arm_dir-10),y+lengthdir_y(24,arm_dir-10),obj_bullet);
                with(inst)
                {
                    direction = other.arm_dir;
                    image_angle = other.arm_dir;
                    speed = 18*global.timescale;
                    damage = 4;
                }
                audio_play_sound(snd_rifle,5,false);
                can_shoot = false;
                alarm[0] = 3.75/global.timescale;
            }
            break;
    }
}
var size_ = ds_list_size(inventory_list)-1;
if(mouse_wheel_up())
{
    currentitemslot += 1;
}
if(mouse_wheel_down())
{
    currentitemslot -= 1;
}
while(currentitemslot &gt; size_)
{
    currentitemslot -= size_+1;
}
while(currentitemslot &lt; 0)
{
    currentitemslot += size_+1;
}
dir = point_direction(x,y,mouse_x,mouse_y);
arm_dir = dir+(angle_difference(arm_dir,dir)/2);
leg_dir = dir+(angle_difference(leg_dir,arm_dir)/2);
var timescaleat15 = 1.5*global.timescale;
var can_move_ = xspeed &gt; timescaleat15 || yspeed &gt; timescaleat15 || xspeed &lt; -timescaleat15 || yspeed &lt; -timescaleat15;
if(can_move_ || arm_index &gt; 0)
{
    arm_index++;
    if(arm_index &gt;= arm_maxindex)
    {
        arm_index -= arm_maxindex;
    }
}
if(x &gt; room_width)
{
    obj_view.x -= room_width;
    x -= room_width;
}
if(x &lt; 0)
{
    obj_view.x += room_width;
    x += room_width;
}
if(y &gt; room_height)
{
    obj_view.y -= room_height;
    y -= room_height;
}
if(y &lt; 0)
{
    obj_view.y += room_height;
    y += room_height;
}
alarm[0] /= global.ts_difference;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _size = ds_list_size(inventory_list);
for(i = 0; i &lt; _size; i++)
{
    var spr_ = get_inventory_sprite(ds_list_find_index(inventory_list,i));
    var enabled_ = (i==currentitemslot)/2
    draw_sprite_ext(spr_,0,(i*64)+(sprite_get_xoffset(spr_)*2),(sprite_get_yoffset(spr_)*2),2,2,0,c_white,0.5+enabled_);
}
draw_text(0,80,"Zombies: " + string(instance_number(obj_zombie_normal)));
draw_text(0,120,"global.ts_lowfps: " + string(global.ts_lowfps) + "#global.ts_difference: " + string(global.ts_difference));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_player_legs,arm_index,x,y,image_xscale,image_yscale,leg_dir,image_blend,image_alpha);
draw_sprite_ext(spr_player_arms,arm_index,x,y,image_xscale,image_yscale,arm_dir,image_blend,image_alpha);
draw_sprite_ext(spr_player_head,image_index,x,y,image_xscale,image_yscale,dir,image_blend,image_alpha);
{
    var spr_ = get_item_sprite(ds_list_find_index(inventory_list,currentitemslot));
    if(spr_ != -1)
    {
        draw_sprite_ext(spr_,0,x,y,image_xscale,image_yscale,arm_dir,image_blend,image_alpha);
    }
}
//draw_text(x+32,y,"xspeed: " + string(xspeed) + "#yspeed: " + string(yspeed) + "#slot: " + string(currentitemslot) + "#slotcount: " + string(ds_list_size(inventory_list)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
