<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server_type = network_socket_tcp;
server_port = 5524;
server_maxclients = 8;
server = network_create_server(server_type,server_port,server_maxclients);
highscore_names = ds_list_create();
highscore_scores = ds_list_create();
tempclientsocket = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var text = "HIGHSCORES:";
for(i = 0; i &lt; clamp(entries_,0,10); i++)
{
    text += "#\#1 - " + ds_list_find_value(highscore_names,i) + ": " + string(ds_list_find_value(highscore_values,i));
}
if(entries_ == 0) text += "#   No scores!"
var buff_ = buffer_create(1024,buffer_grow,1);
buffer_write(buff_,buffer_string,text);
var hash_ = sha1_string_unicode(text);
buffer_write(buff_,buffer_string,hash_);
var temp_ = network_send_packet(data_socket,buff_,buffer_tell(buff_));
buffer_delete(buff_);
show_debug_message("sent message to client: " + string(temp_));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var data_type = ds_map_read(async_load,"type");
var data_id = ds_map_read(async_load,"id");
var data_ip = ds_map_read(async_load,"ip");
var data_port = ds_map_read(async_load,"port");
var entries_ = ds_list_size(highscore_names);
switch(data_type)
{
    case network_type_connect:
        var data_socket = ds_map_read(async_load,"socket");
        var data_succeeded = ds_map_read(async_load,"succeeded");
        tempclientsocket = data_socket;
        show_debug_message("we\'ve got a connection");
        alarm[0] = 2;
        break;
    case network_type_data:
        var data_buffer = ds_map_read(async_load,"buffer");
        var data_size = ds_map_read(async_load,"size");
        var name_ = buffer_read(data_buffer,buffer_string);
        var score_ = buffer_read(data_buffer,buffer_s16);
        for(i = 0; i &lt; entries_; i++)
        {
            if(score_ &gt;= ds_list_find_value(highscore_scores,i) &amp;&amp; score_ &lt;= ds_list_find_value(highscore_scores,i+1))
            {
                ds_list_insert(highscore_names,i,name_);
                ds_list_insert(highscore_scores,i,score_);
                break;
            }
        }
        show_debug_message("received message from client");
        break;
    default:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
